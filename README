This is a Common Lisp implementation of the XMPP RFCs.  Please
see http://common-lisp.net/project/cl-xmpp for more information.

Example:

  * (require :cl-xmpp)

  * (defvar connection (xmpp:connect "username" :hostname "jabber.org"))

;; authenticate (or use xmpp:register to make an account)
  * (xmpp:auth connection "password" "resource")
;; defaults to plain non-sasl authentication but sasl is also available

;; let the server know you want to receive/send presence information
;; (this makes you "come online" if others have a subscription with you)
  * (xmpp:presence connection)

;; send someone a message
  * (xmpp:message connection "username@hostname" "what's going on?")

;; then sit back and watch the messages roll in:
  * (xmpp:receive-stanza-loop connection)
<MESSAGE from=username@hostname to=me@myserver>
[....]
;; or use xmpp:receive-stanza if you're just wanting one stanza
;; (note it will still block until you have received a complete
;; stanza)

;; That's it.  Interrupt the loop to issue other commands, eg:
  * (xmpp:get-roster connection)

;; or any of the other ones you may find by looking through cl-xmpp.lisp
;; and package.lisp to see which ones are exported.

;; If you wish to handle the incoming messages or other objects simply
;; specify an xmpp:handle method for the objects you are interested in
;; or (defmethod xmpp:handle (connection object) ...)  to get them
;; all.  Or alternatively specify :dom-repr t to receive-stanza-loop
;; to get DOM-ish objects.

;; For example, if you wanted to create an annoying reply bot:

 * (defmethod xmpp:handle ((connection xmpp:connection) (message xmpp:message))
    (xmpp:message connection (xmpp:from message) 
        (format nil "reply to: ~a~%" (xmpp:message object))))

